/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DownloadRequest as PrismaDownloadRequest,
} from "@prisma/client";

export class DownloadRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DownloadRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.downloadRequest.count(args);
  }

  async downloadRequests<T extends Prisma.DownloadRequestFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DownloadRequestFindManyArgs>
  ): Promise<PrismaDownloadRequest[]> {
    return this.prisma.downloadRequest.findMany<Prisma.DownloadRequestFindManyArgs>(
      args
    );
  }
  async downloadRequest<T extends Prisma.DownloadRequestFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DownloadRequestFindUniqueArgs>
  ): Promise<PrismaDownloadRequest | null> {
    return this.prisma.downloadRequest.findUnique(args);
  }
  async createDownloadRequest<T extends Prisma.DownloadRequestCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DownloadRequestCreateArgs>
  ): Promise<PrismaDownloadRequest> {
    return this.prisma.downloadRequest.create<T>(args);
  }
  async updateDownloadRequest<T extends Prisma.DownloadRequestUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DownloadRequestUpdateArgs>
  ): Promise<PrismaDownloadRequest> {
    return this.prisma.downloadRequest.update<T>(args);
  }
  async deleteDownloadRequest<T extends Prisma.DownloadRequestDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DownloadRequestDeleteArgs>
  ): Promise<PrismaDownloadRequest> {
    return this.prisma.downloadRequest.delete(args);
  }
}
