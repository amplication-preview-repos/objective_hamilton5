/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DownloadRequestService } from "../downloadRequest.service";
import { DownloadRequestCreateInput } from "./DownloadRequestCreateInput";
import { DownloadRequest } from "./DownloadRequest";
import { DownloadRequestFindManyArgs } from "./DownloadRequestFindManyArgs";
import { DownloadRequestWhereUniqueInput } from "./DownloadRequestWhereUniqueInput";
import { DownloadRequestUpdateInput } from "./DownloadRequestUpdateInput";

export class DownloadRequestControllerBase {
  constructor(protected readonly service: DownloadRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DownloadRequest })
  async createDownloadRequest(
    @common.Body() data: DownloadRequestCreateInput
  ): Promise<DownloadRequest> {
    return await this.service.createDownloadRequest({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DownloadRequest] })
  @ApiNestedQuery(DownloadRequestFindManyArgs)
  async downloadRequests(
    @common.Req() request: Request
  ): Promise<DownloadRequest[]> {
    const args = plainToClass(DownloadRequestFindManyArgs, request.query);
    return this.service.downloadRequests({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DownloadRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async downloadRequest(
    @common.Param() params: DownloadRequestWhereUniqueInput
  ): Promise<DownloadRequest | null> {
    const result = await this.service.downloadRequest({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DownloadRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDownloadRequest(
    @common.Param() params: DownloadRequestWhereUniqueInput,
    @common.Body() data: DownloadRequestUpdateInput
  ): Promise<DownloadRequest | null> {
    try {
      return await this.service.updateDownloadRequest({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DownloadRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDownloadRequest(
    @common.Param() params: DownloadRequestWhereUniqueInput
  ): Promise<DownloadRequest | null> {
    try {
      return await this.service.deleteDownloadRequest({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
